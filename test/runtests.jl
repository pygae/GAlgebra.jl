using PyCall
import SymPy: symbols, sympy, Sym
using GAlgebra
using Test

py"""
def vector(ga, components):
    basis = ga.mv()
    return sum([components[i] * e for i, e in enumerate(basis)])
"""
const vector = py"vector"

py"""
def signature(ga):
    basis = ga.mv()
    signs = [e * e for e in basis]
    p, q, r = 0, 0, 0
    for sign in signs:
        p += 1 if sign == 1 else 0
        q += 1 if sign == -1 else 0
        r += 1 if sign == 0 else 0

    return (p, q, r)
"""
const signature = py"signature"

macro ctest(assertion::Expr, sep::QuoteNode, condition::Expr)
    if sep == :(:if)
        esc(quote
            if $condition
                @test $assertion
            else
                @test_broken $assertion
            end
        end)
    elseif sep == :(:unless)
        esc(quote
            if $condition
                @test_broken $assertion
            else
                @test $assertion
            end
        end)
    else
        throw(DomainError(sep, "sep can only be one of :if, :unless"))
    end    
end

@testset "GAlgebra.jl" begin
    # Basic 
    Hyper   = G(1)       # Hyperbolic numbers. 
    ‚ÑÇ       = G(0,1)     # Complex numbers.
    Dual    = G(0,0,1)   # Dual numbers.
    ‚Ñç       = G(0,2)     # Quaternions.

    # Clifford
    Cl2       = G(2)     # Clifford algebra for 2D vector space.
    Cl3       = G(3)     # Clifford algebra for 3D vector space.
    Spacetime = G(1,3)   # Clifford algebra for timespace vectors.

    # Geometric
    PGA2D = G(2,0,1)     # Projective Euclidean 2D plane. (dual)
    PGA3D = G(3,0,1)     # Projective Euclidean 3D space. (dual)
    CGA2D = G(3,1)       # Conformal 2D space. 
    CGA3D = G(4,1)       # Conformal 3D space. 

    # for V ‚àà [PGA2D, PGA3D, CGA2D, CGA3D] # pass but take extremely long
    # Even PGA2D takes 189.979728 seconds (40.41 k allocations: 1.395 MiB)

    # for V ‚àà [Hyper, Dual, ‚ÑÇ] # for quick test any of p, q, r is 1

    for V ‚àà [Cl2, Cl3, ‚ÑÇ, ‚Ñç, Hyper, Dual, Spacetime]
        sigV = signature(V)
        @time @testset "G$sigV" begin
            # @test_broken 1==1 # for triggering error
            dimV = range(0, stop=V.n)
            I = V.I()

            Œ± = V.mv("Œ±", "scalar")
            Œ≤ = V.mv("Œ≤", "scalar")
            Œ≥ = V.mv("Œ≥", "scalar")
            Œª = V.mv("Œª", "scalar")

            u = V.mv("u", "vector")
            v = V.mv("v", "vector")
            w = V.mv("w", "vector")

            A = V.mv("A", "mv")
            B = V.mv("B", "mv")
            C = V.mv("C", "mv")
            D = V.mv("D", "mv")

            R = V.mv("R", "spinor")

            # Precalculte AB and BA
            AB = A * B
            BA = B * A

            # The following tests verified implementation correctness per definition

            @test u ‚ãÖ v == u | v == (u < v) == (u > v) == u ‚®º v == u ‚®Ω v == u ‚®∞ v
            @test u ‚àß v == u ‚®± v
            @test v ‚®º B == (v < B)
            @test v ‚®Ω B == (v > B)
            @test A ‚®∞ B == A << B == (AB + BA) / 2
            # @test A √óÃÑ B == A ‚®∞ B
            @test A ‚®± B == A >> B == (AB - BA) / 2
            @test A ‚äõ B == A % B

            @test abs(v) == norm(v) == v.norm()
            if V ‚àâ [Spacetime, PGA2D, PGA3D, CGA2D, CGA3D]
                @test abs(R) == norm(R) == R.norm()
            end

            @test ~A == A[:~] == rev(A) == A.rev()

            if V ‚àâ [Dual, PGA2D, PGA3D, CGA2D, CGA3D]
                @test A' == dual(A) == A.dual() == adjoint(A) == A * I # Ga.dual_mode_value is default to "I+"
                @test (v)‚Åª¬π == v[:‚Åª¬π] == v^-1 == inv(v) == v.inv()
                @test v^-2 == (v^2).inv()
            end
            
            @test (A)À£ == A[:*] == involute(A) == (A)‚Çä - (A)‚Çã == A[:+] - A[:-] == A.even() - A.odd()
            @test (A)«Ç == A[:«Ç] == conj(A) == involute(A).rev()   

            if V ‚àâ [Spacetime, PGA2D, PGA3D, CGA2D, CGA3D]
                @test R^-2 == (R^2).inv()
                @test (R)‚Åª¬π == R[:‚Åª¬π] == R^-1 == inv(R) == R.inv()
                @test ((R)‚Åª¬π)À£ == ((R)À£)‚Åª¬π
                @test ((R)‚Åª¬π)«Ç == ((R)«Ç)‚Åª¬π
            end

            if V ‚àà [Cl2, Cl3]
                @test (v)‚Åª¬π == (~v) / norm(v)^2 == v / v^2 
                @test (R)‚Åª¬π == (~R) / norm(R)^2 == R / R^2
            end

            @test v^0 == 1
            @test v^2 == v*v
            
            @test ((A)À£)À£ == ~(~A) == A[:~][:~] == ((A)«Ç)«Ç == A
            @test ~((A)À£) == (~A)À£

            if V ‚àâ [Dual]
                @test proj(u, v) == v.project_in_blade(u)
                @test refl(u, v) == v.reflect_in_blade(u)
            end
            
            @test rot(u ‚àß v, A) == A.rotate_multivector(u ‚àß v)
            @test exp(u ‚àß v) == (u ‚àß v).exp()

            @test typeof(scalar(A)) == Sym
            @test typeof(A[0]) == Mv
            @test scalar(A) == A.scalar() == A[0].obj
            @test (A)‚Çä == A[:+] == even(A) == A.even()
            @test (A)‚Çã == A[:-] == odd(A) == A.odd()

            for r ‚àà dimV
                A[r] == A.grade(r) == A.get_grade(r)
            end

            # The following tests verified many identities in Linear Algebra

            @test v + w == w + v
            @test (u + v) + w == u + (v + w)
            @test v + 0 == v
            @test 0 * v == 0
            @test 1 * v == v
            @test Œ± * (Œ≤ * v) == (Œ± * Œ≤) * v
            @test Œ± * (v + w) == Œ± * v + Œ± * w
            @test (Œ± + Œ≤) * v == Œ± * v + Œ≤ * v
            @test v + (-1) * v == 0
            @test -v == -1 * v

            ùë∂ = vector(V, fill(0, V.n))
            @test Œ± * ùë∂ == ùë∂
            @test (-Œ±) * v == Œ± * (-v) == -Œ± * v

            # The following tests verified many identities in https://arxiv.org/abs/1205.5935

            @test v * v == (v * v).scalar()
            @test v * B == v ‚ãÖ B + v ‚àß B == v ‚®º B + v ‚àß B

            @test u ‚àß (v + Œª * u) == u ‚àß v
            
            @test v == v[1]
            if V.n >= 2
                G2 = V.mv("G2", "grade", 2)
                @test G2 == G2[2]
            end

            for r ‚àà dimV
                @test (A + B)[r] == A[r] + B[r]
                @test (Œª * A)[r] == (A * Œª)[r] == Œª * A[r]

                Ar = A[r]

                @test v ‚®º Ar == (v * Ar - (-1)^r * Ar * v) / 2
                @test Ar ‚®Ω v == (Ar * v - (-1)^r * v * Ar) / 2 == (-1)^(r-1) * (v ‚®º Ar)
                @test v ‚àß Ar == (v * Ar + (-1)^r * Ar * v) / 2
                @test Ar ‚àß v == (Ar * v + (-1)^r * v * Ar) / 2 == (-1)^r * (v ‚àß Ar)

                @test v ‚®º Ar == (v * Ar)[r-1]
                @test v ‚àß Ar == (v * Ar)[r+1]
                @test Ar ‚®Ω v == (Ar * v)[r-1]
                @test Ar ‚àß v == (Ar * v)[r+1]
                @test v * Ar == v ‚®º Ar + v ‚àß Ar
                @test Ar * v == Ar ‚®Ω v + Ar ‚àß v

                Br = B[r]
                Ar ‚®º Br == Ar ‚®Ω Br == (Ar * Br).scalar()

                for s ‚àà dimV
                    @test A[r][s] == (if r == s; A[r] else 0 end)

                    Bs = B[s]
                    ArBs = Ar * Bs

                    @test ArBs == sum([ArBs[abs(r - s) + 2j] for j=0:min(r, s)])                      # A.4.1
                    @test Ar ‚®º Bs == (-1)^(r * (s - 1)) * Bs ‚®Ω Ar                                    # A.4.10
                    @test Ar ‚àß Bs == (-1)^(r * s) * Bs ‚àß Ar                                          # A.4.11

                    for j ‚àà dimV
                        @test ArBs[r + s - 2j] == (-1)^(r * s - j) * (B[s] * A[r])[r + s - 2j]        # A.4.2
                    end

                    @test v ‚®º ArBs == (v * ArBs - (-1)^(r+s) * ArBs * v)/2 ==
                        (v ‚®º Ar) * Bs + (-1)^r * Ar * (v ‚®º Bs) == 
                        (v ‚àß Ar) * Bs - (-1)^r * Ar * (v ‚àß Bs)
                    @test v ‚àß ArBs == (v * ArBs + (-1)^(r+s) * ArBs * v)/2 ==
                        (v ‚àß Ar) * Bs - (-1)^r * Ar * (v ‚®º Bs) ==
                        (v ‚®º Ar) * Bs + (-1)^r * Ar * (v ‚àß Bs)

                    @test v ‚®º (Ar ‚àß Bs) == (v ‚®º Ar) ‚àß Bs + (-1)^r * Ar ‚àß (v ‚®º Bs)
                    @test v ‚àß (Ar ‚®Ω Bs) == (v ‚àß Ar) ‚®Ω Bs - (-1)^r * Ar ‚®Ω (v ‚®º Bs)
                    @test v ‚àß (Ar ‚®º Bs) == (v ‚®º Ar) ‚®º Bs + (-1)^r * Ar ‚®º (v ‚àß Bs)

                    if r > s
                        @test Ar ‚®º Bs == Bs ‚®Ω Ar == 0
                    end

                    for t ‚àà dimV
                        Ct = C[t]

                        Ar ‚àß (Bs ‚àß Ct) == (Ar * Bs * Ct)[r + s + t]
                    end
                end
            end

            @test A == sum([A[r] for r ‚àà dimV])
            @test A[-3] == 0

            @test v ‚®º A == (v * A - (A)À£ * v)/2                                                      # A.4.13
            @test v ‚àß A == (v * A + (A)À£ * v)/2                                                      # A.4.14
            @test A ‚®Ω v == - v ‚®º (A)À£                                                                # A.4.15
            @test A ‚àß v == v ‚àß (A)À£                                                                  # A.4.16

            @test v ‚®º (AB) == (v ‚®º A) * B + (A)À£ * (v ‚®º B) == (v ‚àß A) * B - (A)À£ * (v ‚àß B)       # A.4.18-19
            @test v ‚àß (AB) == (v ‚àß A) * B - (A)À£ * (v ‚®º B) == (v ‚®º A) * B + (A)À£ * (v ‚àß B)       # A.4.20-21
            @test v ‚®º (A ‚àß B) == (v ‚®º A) ‚àß B + (A)À£ ‚àß (v ‚®º B)                                       # A.4.22
            @test v ‚àß (A ‚®Ω B) == (v ‚àß A) ‚®Ω B - (A)À£ ‚®Ω (v ‚®º B)                                       # A.4.23
            @test v ‚àß (A ‚®º B) == (v ‚®º A) ‚®º B + (A)À£ ‚®º (v ‚àß B)                                       # A.4.24

            @test v ‚®º A[:+] == - (A[:+] ‚®Ω v)
            @test v ‚®º A[:-] == A[:-] ‚®Ω v
            @test v ‚àß A[:+] == A[:+] ‚àß v
            @test v ‚àß A[:-] == - (A[:-] ‚àß v)

            @test (AB).scalar() == (BA).scalar() == (~A * ~B).scalar() == 
                ((A)À£ * (B)À£).scalar() == ((A)«Ç * (B)«Ç).scalar()                                      # A.4.3-6

            @test A ‚®º B == sum([sum([(A[r] * B[s])[s - r] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.7
            @test A ‚®Ω B == sum([sum([(A[r] * B[s])[r - s] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.8
            @test A ‚àß B == sum([sum([(A[r] * B[s])[r + s] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.9

            @test (A ‚àß B) ‚àß C == A ‚àß (B ‚àß C) == A ‚àß B ‚àß C                                           # A.4.28
            @test A ‚®º (B ‚®Ω C) == (A ‚®º B) ‚®Ω C                                                        # A.4.29
            @test A ‚®º (B ‚®º C) == (A ‚àß B) ‚®º C                                                        # A.4.30
            @test A ‚®Ω (B ‚àß C) == (A ‚®Ω B) ‚®Ω C                                                        # A.4.31
            @test (A ‚àß B) ‚®º C == A ‚®º (B ‚®º C)

            @test u ‚àß A ‚àß v == - v ‚àß A ‚àß u                                                           # A.4.17

            @test AB == A ‚®± B + A ‚®∞ B
            @test A ‚®∞ B == B ‚®∞ A
            @test A ‚®± B == - B ‚®± A

            @test A ‚äõ B == B ‚äõ A
            if V ‚àâ [Spacetime, ‚ÑÇ, ‚Ñç, Dual, PGA2D, PGA3D, CGA2D, CGA3D]
                @test A ‚äõ B == A' ‚äõ B' == A.dual() ‚äõ B.dual()
            end      
            @test A ‚äõ B == ~A ‚äõ ~B == A.rev() ‚äõ B.rev()
            @test A ‚äõ (B * C) == (~B * A) ‚äõ C
            @test A ‚äõ (B ‚®Ω C) == (~B ‚®Ω A) ‚äõ C
            @test A ‚äõ (B ‚®º C) == (~B ‚àß A) ‚äõ C
            @test A ‚äõ (B ‚àß C) == (~B ‚®º A) ‚äõ C

            @test AB ‚ãÖ C ‚àß D == ((AB) ‚ãÖ C) ‚àß D

            if V ‚àâ [Dual, PGA2D, PGA3D, CGA2D, CGA3D]
                @test u.dual() == u * V.I()
                @test proj(u, v) == (v ‚ãÖ u) / u == (v ‚®º u) ‚®º u.inv()
                @test proj(w, v) + proj(w, u) == proj(w, u + v)
            end

            if V == Cl3
                @test u √ó v == -I * (u ‚àß v)
                @test_throws PyCall.PyError A √ó B

                Vr = u ‚àß v
                @test proj(Vr, B) == B ‚®º Vr * (Vr)‚Åª¬π == (B ‚®º Vr) ‚®º (Vr)‚Åª¬π                               # A.4.34
                # TODO this is failing for now
                @test_broken refl(Vr, B) == B ‚àß Vr * (Vr)‚Åª¬π == (B ‚àß Vr) ‚®Ω (Vr)‚Åª¬π                               # A.4.35

                # The following tests verified interoperability with numeric and symbolic numbers
                (ex, ey, ez) = V.mv()

                uu = vector(V, [1, 2, 3])
                vv = vector(V, [4, 5, 6])
                ww = vector(V, [5, 6, 7])

                @test uu + vv == 5 * ex + 7 * ey + 9 * ez
                @test 7 * uu + 2 * ww == 17 * ex + 26 * ey + 35 * ez
                @test 7 * uu - 2 * ww == -3 * ex + 2 * ey + 7 * ez
                @test 3 * uu + 2 * vv + ww == 16 * ex + 22 * ey + 28 * ez
                @test (sympy.sqrt(2) * u + sympy.Rational(2, 3) * v) ‚ãÖ ey == 
                    sympy.sqrt(2) * (u ‚ãÖ ey) + sympy.Rational(2, 3) * (v ‚ãÖ ey)
            end
        end

        # The following takes forever

        # High-Dimensional GA
        # DCGA3D = G(6,2)      # Double Conformal 3D Space.
        # TCGA3D = G(9,3)      # Tripple Conformal 3D Space.
        # DCGSTA = G(4,8)      # Double Conformal Geometric Space Time Algebra.
        # QCGA   = G(9,6)      # Quadric Conformal Geometric Algebra. 
    end
end