using PyCall
import SymPy: symbols, sympy, Sym
using GAlgebra
using Test

py"""
def vector(ga, components):
    bases = ga.mv()
    return sum([components[i] * e for i, e in enumerate(bases)])
"""
const vector = py"vector"

@testset "GAlgebra.jl" begin
    # Write your own tests here.
    (x, y, z) = xyz = symbols("x,y,z",real=true)
    (o3d, ex, ey, ez) = galgebra.ga.Ga.build("e", g=[1, 1, 1], coords=xyz)

    V = o3d
    dimV = range(0, stop=V.n)
    I = V.I()

    Œ± = V.mv("Œ±", "scalar")
    Œ≤ = V.mv("Œ≤", "scalar")
    Œ≥ = V.mv("Œ≥", "scalar")
    Œª = V.mv("Œª", "scalar")

    u = V.mv("u", "vector")
    v = V.mv("v", "vector")
    w = V.mv("w", "vector")

    A = V.mv("A", "mv")
    B = V.mv("B", "mv")
    C = V.mv("C", "mv")
    D = V.mv("D", "mv")

    G = V.mv("G", "grade", 2)
    R = V.mv("R", "spinor")

    # The following tests verified implementation correctness per definition

    @test u ‚ãÖ v == u | v == (u < v) == (u > v) == u ‚®º v == u ‚®Ω v == u ‚®∞ v
    @test u ‚àß v == u ‚®± v
    @test v ‚®º B == (v < B)
    @test v ‚®Ω B == (v > B)
    @test A ‚®∞ B == A << B == (A * B + B * A) / 2
    # @test A √óÃÑ B == A ‚®∞ B
    @test A ‚®± B == A >> B == (A * B - B * A) / 2
    @test A ‚äõ B == A % B

    @test u √ó v == -I * (u ‚àß v)
    @test_throws PyCall.PyError A √ó B

    @test -v == -1 * v
    @test abs(v) == v.norm()
    @test abs(R) == R.norm()
    @test ~A == A.rev()
    @test A' == adjoint(A) == A.dual() == A * I # Ga.dual_mode_value is default to "I+"
    @test v^-1 == inv(v) == v.inv() == v / (v^2)
    @test R^-1 == inv(R) == R.inv() == R / (R^2)

    @test v^-2 == (v^2).inv()
    @test R^-2 == (R^2).inv()
    @test v^0 == 1
    @test v^2 == v*v

    @test (v)‚Åª¬π == v^-1
    @test (R)‚Åª¬π == R^-1
    @test (A)‚Åª == involution(A) == A.even() - A.odd()
    @test (A)·µÄ == A.rev()
    @test (A)«Ç == involution(A).rev()
    @test proj(u, v) == v.project_in_blade(u)
    @test refl(u, v) == v.reflect_in_blade(u)
    @test rot(u ‚àß v, A) == A.rotate_multivector(u ‚àß v)
    @test exp(u ‚àß v) == (u ‚àß v).exp()

    for r ‚àà dimV
        A[r] == A.grade(r) == A.get_grade(r)
    end

    # The following tests verified many identities in Linear Algebra

    @test v + w == w + v
    @test (u + v) + w == u + (v + w)
    @test v + 0 == v
    @test 0 * v == 0
    @test 1 * v == v
    @test Œ± * (Œ≤ * v) == (Œ± * Œ≤) * v
    @test Œ± * (v + w) == Œ± * v + Œ± * w
    @test (Œ± + Œ≤) * v == Œ± * v + Œ≤ * v
    @test v + (-1) * v == 0

    ùë∂ = vector(V, [0, 0, 0])
    @test Œ± * ùë∂ == ùë∂
    @test (-Œ±) * v == Œ± * (-v) == -Œ± * v

    # The following tests verified many identities in https://arxiv.org/abs/1205.5935

    @test v * v == (v * v).scalar()
    @test v * B == v ‚ãÖ B + v ‚àß B == v ‚®º B + v ‚àß B

    @test u ‚àß (v + Œª * u) == u ‚àß v
    
    @test v == v[1]
    @test G == G[2]

    for r ‚àà dimV
        @test (A + B)[r] == A[r] + B[r]
        @test (Œª * A)[r] == (A * Œª)[r] == Œª * A[r]

        Ar = A[r]

        @test v ‚®º Ar == (v * Ar - (-1)^r * Ar * v) / 2
        @test Ar ‚®Ω v == (Ar * v - (-1)^r * v * Ar) / 2 == (-1)^(r-1) * (v ‚®º Ar)
        @test v ‚àß Ar == (v * Ar + (-1)^r * Ar * v) / 2
        @test Ar ‚àß v == (Ar * v + (-1)^r * v * Ar) / 2 == (-1)^r * (v ‚àß Ar)

        @test v ‚®º Ar == (v * Ar)[r-1]
        @test v ‚àß Ar == (v * Ar)[r+1]
        @test Ar ‚®Ω v == (Ar * v)[r-1]
        @test Ar ‚àß v == (Ar * v)[r+1]
        @test v * Ar == v ‚®º Ar + v ‚àß Ar
        @test Ar * v == Ar ‚®Ω v + Ar ‚àß v

        Br = B[r]
        Ar ‚®º Br == Ar ‚®Ω Br == (Ar * Br).scalar()

        for s ‚àà dimV
            @test A[r][s] == (if r == s; A[r] else 0 end)

            Bs = B[s]
            ArBs = Ar * Bs

            @test ArBs == sum([ArBs[abs(r - s) + 2j] for j=0:min(r, s)])                      # A.4.1
            @test Ar ‚®º Bs == (-1)^(r * (s - 1)) * Bs ‚®Ω Ar                                    # A.4.10
            @test Ar ‚àß Bs == (-1)^(r * s) * Bs ‚àß Ar                                          # A.4.11

            for j ‚àà dimV
                @test ArBs[r + s - 2j] == (-1)^(r * s - j) * (B[s] * A[r])[r + s - 2j]        # A.4.2
            end

            @test v ‚®º ArBs == (v * ArBs - (-1)^(r+s) * ArBs * v)/2 ==
                (v ‚®º Ar) * Bs + (-1)^r * Ar * (v ‚®º Bs) == 
                (v ‚àß Ar) * Bs - (-1)^r * Ar * (v ‚àß Bs)
            @test v ‚àß ArBs == (v * ArBs + (-1)^(r+s) * ArBs * v)/2 ==
                (v ‚àß Ar) * Bs - (-1)^r * Ar * (v ‚®º Bs) ==
                (v ‚®º Ar) * Bs + (-1)^r * Ar * (v ‚àß Bs)

            @test v ‚®º (Ar ‚àß Bs) == (v ‚®º Ar) ‚àß Bs + (-1)^r * Ar ‚àß (v ‚®º Bs)
            @test v ‚àß (Ar ‚®Ω Bs) == (v ‚àß Ar) ‚®Ω Bs - (-1)^r * Ar ‚®Ω (v ‚®º Bs)
            @test v ‚àß (Ar ‚®º Bs) == (v ‚®º Ar) ‚®º Bs + (-1)^r * Ar ‚®º (v ‚àß Bs)

            if r > s
                @test Ar ‚®º Bs == Bs ‚®Ω Ar == 0
            end

            for t ‚àà dimV
                Ct = C[t]

                Ar ‚àß (Bs ‚àß Ct) == (Ar * Bs * Ct)[r + s + t]
            end
        end
    end

    @test A == sum([A[r] for r ‚àà dimV])
    @test A[-3] == 0

    @test v ‚®º A == (v * A - (A)‚Åª * v)/2                                                      # A.4.13
    @test v ‚àß A == (v * A + (A)‚Åª * v)/2                                                      # A.4.14
    @test A ‚®Ω v == - v ‚®º (A)‚Åª                                                                # A.4.15
    @test A ‚àß v == v ‚àß (A)‚Åª                                                                  # A.4.16

    @test v ‚®º (A * B) == (v ‚®º A) * B + (A)‚Åª * (v ‚®º B) == (v ‚àß A) * B - (A)‚Åª * (v ‚àß B)       # A.4.18-19
    @test v ‚àß (A * B) == (v ‚àß A) * B - (A)‚Åª * (v ‚®º B) == (v ‚®º A) * B + (A)‚Åª * (v ‚àß B)       # A.4.20-21
    @test v ‚®º (A ‚àß B) == (v ‚®º A) ‚àß B + (A)‚Åª ‚àß (v ‚®º B)                                       # A.4.22
    @test v ‚àß (A ‚®Ω B) == (v ‚àß A) ‚®Ω B - (A)‚Åª ‚®Ω (v ‚®º B)                                       # A.4.23
    @test v ‚àß (A ‚®º B) == (v ‚®º A) ‚®º B + (A)‚Åª ‚®º (v ‚àß B)                                       # A.4.24

    @test v ‚®º A.even() == - (A.even() ‚®Ω v)
    @test v ‚®º A.odd() == A.odd() ‚®Ω v
    @test v ‚àß A.even() == A.even() ‚àß v
    @test v ‚àß A.odd() == - (A.odd() ‚àß v)

    @test (A * B).scalar() == (B * A).scalar() == (~A * ~B).scalar() == 
        ((A)‚Åª * (B)‚Åª).scalar() == ((A)·µÄ * (B)·µÄ).scalar() == ((A)«Ç * (B)«Ç).scalar()            # A.4.3-6

    @test A ‚®º B == sum([sum([(A[r] * B[s])[s - r] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.7
    @test A ‚®Ω B == sum([sum([(A[r] * B[s])[r - s] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.8
    @test A ‚àß B == sum([sum([(A[r] * B[s])[r + s] for r ‚àà dimV]) for s ‚àà dimV])             # A.4.9

    @test (A ‚àß B) ‚àß C == A ‚àß (B ‚àß C) == A ‚àß B ‚àß C                                           # A.4.28
    @test A ‚®º (B ‚®Ω C) == (A ‚®º B) ‚®Ω C                                                        # A.4.29
    @test A ‚®º (B ‚®º C) == (A ‚àß B) ‚®º C                                                        # A.4.30
    @test A ‚®Ω (B ‚àß C) == (A ‚®Ω B) ‚®Ω C                                                        # A.4.31
    @test (A ‚àß B) ‚®º C == A ‚®º (B ‚®º C)

    @test u ‚àß A ‚àß v == - v ‚àß A ‚àß u                                                           # A.4.17

    @test A * B == A ‚®± B + A ‚®∞ B
    @test A ‚®∞ B == B ‚®∞ A
    @test A ‚®± B == - B ‚®± A

    @test A ‚äõ B == B ‚äõ A
    @test A ‚äõ B == A' ‚äõ B' == A.dual() ‚äõ B.dual()
    @test A ‚äõ B == ~A ‚äõ ~B == A.rev() ‚äõ B.rev()
    @test A ‚äõ (B * C) == (~B * A) ‚äõ C
    @test A ‚äõ (B ‚®Ω C) == (~B ‚®Ω A) ‚äõ C
    @test A ‚äõ (B ‚®º C) == (~B ‚àß A) ‚äõ C
    @test A ‚äõ (B ‚àß C) == (~B ‚®º A) ‚äõ C

    @test A * B ‚ãÖ C ‚àß D == ((A * B) ‚ãÖ C) ‚àß D

    @test u.dual() == u * V.I()
    @test proj(u, v) == (v ‚ãÖ u) / u == (v ‚®º u) ‚®º u.inv()
    @test proj(w, v) + proj(w, u) == proj(w, u + v)

    Vr = u ‚àß v
    @test proj(Vr, B) == B ‚®º Vr * (Vr)‚Åª¬π == (B ‚®º Vr) ‚®º (Vr)‚Åª¬π                               # A.4.34
    # TODO this is failing for now
    # @test refl(Vr, B) == B ‚àß Vr * (Vr)‚Åª¬π == (B ‚àß Vr) ‚®Ω (Vr)‚Åª¬π                               # A.4.35

    # The following tests verified interoperability with numeric and symbolic numbers

    uu = vector(V, [1, 2, 3])
    vv = vector(V, [4, 5, 6])
    ww = vector(V, [5, 6, 7])

    @test uu + vv == 5 * ex + 7 * ey + 9 * ez
    @test 7 * uu + 2 * ww == 17 * ex + 26 * ey + 35 * ez
    @test 7 * uu - 2 * ww == -3 * ex + 2 * ey + 7 * ez
    @test 3 * uu + 2 * vv + ww == 16 * ex + 22 * ey + 28 * ez
    @test (sympy.sqrt(2) * u + sympy.Rational(2, 3) * v) ‚ãÖ ey == 
        sympy.sqrt(2) * (u ‚ãÖ ey) + sympy.Rational(2, 3) * (v ‚ãÖ ey)
end
